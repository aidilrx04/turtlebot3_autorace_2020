#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import math
from geometry_msgs.msg import Twist
import rospy
import os
from enum import Enum
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import LaserScan, Image
from turtlebot3_autorace_msgs.msg import MovingParam
import cv2
from cv_bridge import CvBridge
import time

class DetectParking():
    def __init__(self):
        # subscribes state 
        self.sub_scan_obstacle = rospy.Subscriber('/detect/scan', LaserScan, self.cbScanObstacle, queue_size=1)
        self.sub_parking_order = rospy.Subscriber('/detect/parking_order', UInt8, self.cbParkingOrder, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.sub_image = rospy.Subscriber('/detect/image_input', Image, self.cbGetImage, queue_size=1)
        
        # publishes state
        self.pub_parking_return = rospy.Publisher('/detect/parking_stamped', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)
        self.pub_parking_start = rospy.Publisher('/control/parking_start', UInt8, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

        self.StepOfParking = Enum('StepOfParking', 'parking exit search_parking search_nonreserved_parking')
        self.start_obstacle_detection = False
        self.is_obstacle_detected_R = False
        self.is_obstacle_detected_L = False
        self.is_moving_complete = False

        self.cvBridge = CvBridge()  
        self.cv_image = None

        self.is_parking_control_start = False

        self.is_obstacle_detected = False

    def cbGetImage(self, image_msg):
        if image_msg is not None:
            # print('setting cv_image')
            self.cv_image = self.cvBridge.imgmsg_to_cv2(image_msg, 'bgr8')

        # self.fnBlinkParkSign
        
    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbParkingOrder(self, order):
        rospy.loginfo(f"DP: {order.data}")
        msg_pub_parking_return = UInt8()

        if order.data == self.StepOfParking.search_parking.value:
            rospy.loginfo('Searching parking point line...')
            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.06
            self.pub_max_vel.publish(msg_pub_max_vel)

            while True:
                # rospy.loginfo('Finding dot line...')
                if self.fnFindDotLine():
                    break
                else:
                    pass

            # go forward by few centimeters
            msg_pub_parking_return.data = self.StepOfParking.parking.value
            rospy.sleep(7)

            # rospy.loginfo('FOund dot line...')

        elif order.data == self.StepOfParking.parking.value:
            rospy.loginfo('Now parking...')

            if self.is_parking_control_start == False:
                msg_parking_start = UInt8()
                msg_parking_start.data = 1
                self.pub_parking_start.publish(msg_parking_start)
                self.is_parking_control_start = True

        elif order.data == self.StepOfParking.search_nonreserved_parking.value:
            rospy.loginfo("searching non reserved parking")

            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.1
            self.pub_max_vel(msg_pub_max_vel)

            while True:
                if self.is_obstacle_detected == False:
                    self.is_parking_allowed = True
                    rospy.loginfo('Parking lot is clear')
                    break
                else:
                    self.is_parking_allowed = False
                    rospy.loginfo('right side is full!')

            # msg_pub_max_vel = Float64()
            
            msg_pub_parking_return.data = self.StepOfParking.parking.value



            # msg_pub_parking_return = self.StepOfParking.parking.value

        self.pub_parking_return.publish(msg_pub_parking_return)

    def fnFindDotLine(self):
        # rospy.loginfo('in find dot line...')
        self.cv_bitn_img = cv2.bitwise_not(self.cv_image)
        params = cv2.SimpleBlobDetector_Params()

        # change tresholds
        params.minThreshold = 0
        params.maxThreshold = 254

        # filter by area
        params.filterByArea = True
        params.minArea = 5000
        params.maxArea = 6000

        # filter by circularity
        params.filterByCircularity = True
        params.minCircularity = 0.5

        # filter by convexity
        params.filterByConvexity = True
        params.minConvexity = 0.8

        det = cv2.SimpleBlobDetector_create(params)
        keypts = det.detect(self.cv_bitn_img)

        count = 0

        for i in range(len(keypts)):
            x = int(keypts[i].pt[0])
            y = int(keypts[i].pt[1])

            if x > 500:
                count += 1

        # print(f'blob count: {count}')

        if count >= 1:
            return True
        else:
            return False

    def fnStraight(self,distance: int) -> None:

        twist = Twist()
        twist.linear.x = distance
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def cbParkingOrder1(self, order):
        msg_pub_parking_return = UInt8()

        if order.data == self.StepOfParking.parking.value:                              
            rospy.loginfo("Now motion")
            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.00
            self.pub_max_vel.publish(msg_pub_max_vel)

            rospy.sleep(1)

            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.45
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("go left")
            msg_moving = MovingParam()
            msg_moving.moving_type=2
            msg_moving.moving_value_angular=90
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=1.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            self.start_obstacle_detection = True
            while True:
                if self.is_obstacle_detected_L == True or self.is_obstacle_detected_R == True:
                    break
            
            if self.is_obstacle_detected_R == False:
                rospy.loginfo("right parking is clear")
                rospy.loginfo("go right")
                msg_moving = MovingParam()
                msg_moving.moving_type=3
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.20
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)
                
                rospy.loginfo("go back straight")
                msg_moving = MovingParam()
                msg_moving.moving_type= 5
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.20
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go right")
                msg_moving = MovingParam()
                msg_moving.moving_type= 3
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.9
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go left")
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)   

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.2
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)       
            
            elif self.is_obstacle_detected_L == False:
                rospy.loginfo("left parking is clear")
                rospy.loginfo("go left")
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.20
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)
                
                rospy.loginfo("go back straight")
                msg_moving = MovingParam()
                msg_moving.moving_type= 5
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.20
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go left")
                msg_moving = MovingParam()
                msg_moving.moving_type= 2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=1.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go left")
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.2
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

            rospy.loginfo("parking finished")
            msg_pub_parking_return.data = self.StepOfParking.exit.value

        elif order.data == self.StepOfParking.exit.value:            
            rospy.loginfo("parking finished")
            msg_pub_parking_return.data = self.StepOfParking.exit.value

        self.pub_parking_return.publish(msg_pub_parking_return)
        rospy.sleep(3)            

    def cbScanObstacle(self, scan):
        angle_scan = 60
        scan_start = 270 - angle_scan
        scan_end = 270 + angle_scan
        threshold_distance = 0.5
        is_obstacle_detected = False

        for i in range(scan_start, scan_end):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                is_obstacle_detected = True

        self.is_obstacle_detected = is_obstacle_detected

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_parking')
    node = DetectParking()
    node.main()
